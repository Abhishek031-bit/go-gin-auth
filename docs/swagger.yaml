basePath: /
definitions:
  models.AuthRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
host: localhost:6969
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample API for a Go Gin authentication service.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Go Gin Auth API
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - '*/*'
      description: get the status of API.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Show the status of the API.
      tags:
      - health
  /auth/login:
    post:
      consumes:
      - application/json
      description: Log in a user with email and password to get a JWT token
      parameters:
      - description: User login details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.AuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"token": "jwt_token_string"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: '{"error": "Bad Request"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: '{"error": "invalid email or password"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{"error": "Internal Server Error"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Log in a user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.AuthRequest'
      produces:
      - application/json
      responses:
        "201":
          description: '{"message": "user created"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: '{"error": "Bad Request"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: '{"error": "email already exists"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{"error": "Internal Server Error"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - auth
  /user/download:
    get:
      consumes:
      - '*/*'
      description: Lists all files uploaded by the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: '{"total": 1, "files": [{"ID": 1, "CreatedAt": "2023-01-01T00:00:00Z",
            "UpdatedAt": "2023-01-01T00:00:00Z", "DeletedAt": null, "FilePath": "uploads/user_at_example.com/file.txt",
            "OriginalName": "file.txt", "UserID": 1}]}'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: '{"error": "Unauthorized"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{"error": "Internal Server Error"}'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: List user files
      tags:
      - user
  /user/download/{fileID}:
    get:
      consumes:
      - '*/*'
      description: Downloads a specific file owned by the authenticated user
      parameters:
      - description: File ID
        in: path
        name: fileID
        required: true
        type: integer
      produces:
      - application/octet-stream
      responses:
        "200":
          description: File content
          schema:
            type: file
        "401":
          description: '{"error": "Unauthorized"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: '{"error": "Forbidden"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: '{"error": "File not found"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{"error": "Internal Server Error"}'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Download a user file
      tags:
      - user
  /user/me:
    get:
      consumes:
      - '*/*'
      description: Get the profile information of the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: '{"email": "user@example.com"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{"error": "Internal Server Error"}'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get user profile
      tags:
      - user
  /user/upload:
    post:
      consumes:
      - multipart/form-data
      description: Uploads a file for the authenticated user
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "File uploaded successfully", "file_name": "example.txt",
            "path": "uploads/user_at_example.com/example.txt"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: '{"error": "Bad Request"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: '{"error": "Unauthorized"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{"error": "Internal Server Error"}'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Upload a file
      tags:
      - user
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
